<?xml version='1.0' encoding='gb2312' ?>
<export>
    <validators>
        <validator enable='1' name='多借多贷' output='发现多借多贷: 凭证日期 "{0}", 凭证字号 "{1}-{2}"' >
            <sql>
                select 
                substring(D.voucherDate,1,10) as voucherDate ,DT.code as typeCode,D.code
                from 
                GL_Doc  D
                left  join  AA_DocType DT on D.idDocType=DT.Id 
                inner join (
                    select count(*) drCount,idDocDTO 
                    from 
                        GL_Entry ms 
                        left join GL_AuxiliaryInfo mss on mss.idEntryDTO=ms.id
                    where isnull(origamountdr,0)&lt;&gt;0
                    group by idDocDTO
                )  M1 on D.Id=M1.idDocDTO
                inner join 
                (
                    select count(*) crCount,idDocDTO 
                    from 
                        GL_Entry ms 
                        left join GL_AuxiliaryInfo mss on mss.idEntryDTO=ms.id                        
                    where isnull(origamountcr,0)&lt;&gt;0
                    group by idDocDTO
                ) M2 ON D.ID=M2.idDocDTO
                where 
                M1.drCount&gt;1 and 
                M2.crCount&gt;1 and
                D.voucherdate between '{dateBegin}' and '{dateEnd}'
                order by
                DT.code,D.code            
            </sql>
        </validator>
        <validator enable='1' name='用户自定义一级科目' output='发现用户自定义一级科目: 科目代码 "{0}", 科目名称 "{1}"' >
            <sql>
                select 
                code,name 
                from 
                AA_Account 
                where 
                depth=1 and 
                accountingYear={currentYear} and  
                code not in (

                    select code from UFTSystem..Eap_Subject  where depth=1 and IDSubjectClass in
                    (
                        select ID from UFTSystem..Eap_SubjectClass where IDIndustryType in
                        (
                          select ID from UFTSystem..Eap_IndustryType where 
                          code in 
                          (
                            select value from EAP_AccInformation where SysID='FI' and Name='TradeKind'
                          )
                        )
                    )
                ) 
                order by 
                code            
            </sql>
        </validator> 
        <validator enable='1' name='应收账款科目一级设辅助帐' output='发现应收账款科目一级设辅助帐: 科目代码 "{0}", 科目名称 "{1}"' >
            <sql type='defalut'>
                select 
                code,name 
                from 
                AA_Account 
                where 
                depth=1 and
                name like '%应收%' and
                accountingYear={currentYear} and
                (
                    isAuxAccPerson=1 or 
                    isAuxAccDepartment=1 or 
                    isAuxAccSupplier=1 or 
                    isAuxAccProject=1 or 
                    isAuxAccCustomer=1 
                ) 
                order by 
                code            
            </sql>
        </validator>        
        <validator enable='1' name='凭证有断号' output='发现凭证有断号: 会计期间 "{0}", 凭证字 "{1}", 断号 "{2}"' >
            <sql>
                select 
                SP.currentPeriod,DT.code as typeCode,docsystemno-1 
                from 
                GL_Doc  D
                left  join  AA_DocType DT on D.idDocType=DT.Id
                left  join  SM_Period  SP on SP.id= D.idperiod
                where
                D.voucherdate between '{dateBegin}' and '{dateEnd}'
                group by 
                D.idperiod,SP.currentPeriod,DT.code,D.code,docsystemno
                having 
                max(docsystemno)-count(docsystemno)&gt;0 
                order by SP.currentPeriod,typeCode,docsystemno           
            </sql>
        </validator>
        <validator enable='1' name='外币类凭证汇率检测' output='发现外币类凭证汇率为零: 凭证日期 "{0}", 凭证字号 "{1}-{2}"' >
            <sql>
                select 
                distinct 
                substring(D.voucherDate,1,10) as voucherdate,DT.code as typeCode,D.code  
                from 
                GL_Doc  D
                left  join  AA_DocType DT on D.idDocType=DT.Id 
                left  join  GL_Entry   E  on D.id=E.idDocDTO
                where 
                (isnull(E.origAmountDr,0)&lt;&gt;0 or isnull(E.origAmountCr,0)&lt;&gt;0) and 
                E.exchangerate=0 and 
                D.voucherdate between '{dateBegin}' and '{dateEnd}' 
                order by 
                DT.code,D.code            
            </sql>
        </validator>
        <validator enable='1' name='现金银行存款的日记帐是否有红字情况' output='发现金银行存款的日记帐有红字: 凭证日期 "{0}", 凭证字号 "{1}-{2}"' >
            <sql>
                select
                distinct 
                substring(D.voucherDate,1,10) as voucherDate,DT.code as typeCode,D.code   
                from GL_Doc  D
                left  join  AA_DocType DT on D.idDocType=DT.Id 
                left  join  GL_Entry  E on D.id=E.idDocDTO
                left  join  GL_AuxiliaryInfo AU on E.id=AU.idEntryDTO                
                where 
                (
                 isnull(E.amountDr,0)&lt;0 or 
                 isnull(E.amountCr,0)&lt;0 or
                 isnull(E.origAmountDr,0)&lt;0 or
                 isnull(E.origAmountCr,0)&lt;0 or
                 isnull(AU.origAmount,0)&lt;0 or
                 isnull(AU.amount,0)&lt;0                  
                ) and
                E.idaccount in (
                    select id from AA_Account where 
                    (iscash=1 or isbank=1) and
                    accountingYear={currentYear}
                ) and
                D.voucherdate between '{dateBegin}' and '{dateEnd}'          
            </sql>
        </validator>   
        <validator enable='1' name='自动检测有外币的帐户科目期末余额，是否本币外币都有或都没有（主要是针对有的科目外币为0而本币却有金额的情况)' output='发现有外币的帐户科目期末余额本币外币不对应: 会计期间 "{0}", 科目编码 "{1}", 科目名称 "{2}"' >
            <sql>
                select 
                P.currentPeriod,
                A.code,
                A.name
                /*
                sum(
                isnull(periodBeginOrigAmountDr,0) 
                -isnull(periodBeginOrigAmountCr,0) 
                +isnull(origAmountDr,0) 
                -isnull(origAmountCr,0) 
                ) as origAmountBalance,
                sum(
                isnull(periodBeginAmountDr,0) 
                -isnull(periodBeginAmountCr,0) 
                +isnull(amountDr,0) 
                -isnull(amountCr,0) 
                ) as amountBalance
                */

                from 
                GL_Journal J
                left join AA_Account A on A.id=J.idaccount
                left join SM_Period  P on P.currentYear=J.year  and 
                J.year={currentYear} and
                A.isExchange=1 and
                P.currentPeriod&gt;=J.currentPeriod and 
                P.currentPeriod between 1 and {periodEnd} 
                group by 
                P.currentYear,
                P.currentPeriod,
                A.code,
                A.name,
                idcurrency,
                idauxAccPerson,
                idauxAccDepartment,
                idauxAccProject,
                idauxAccCustomer,
                idauxAccSupplier
                having
                P.currentPeriod between {periodBegin} and {periodEnd} and
                sum(
                isnull(periodBeginOrigAmountDr,0) 
                -isnull(periodBeginOrigAmountCr,0) 
                +isnull(origAmountDr,0) 
                -isnull(origAmountCr,0) 
                )=0 and
                sum(
                isnull(periodBeginAmountDr,0) 
                -isnull(periodBeginAmountCr,0) 
                +isnull(amountDr,0) 
                -isnull(amountCr,0)
                )&lt;&gt;0
            
            </sql>
        </validator>                     
    </validators>
    <files name='GSSM.TXT' title='会计核算软件数据接口'>
        <config current='2' encoding='0'>
            <type index='1'>
               严格按标准，超出部分截取
            </type>
            <type index='2'>
               按标准，字符忽略超出部分忽略 , 数值按标准
            </type>
            <type index='3'>
               按系统实际
            </type>                      
        </config>
        <file name='DZZB.TXT' title='电子账簿' flag=''>
            <sql>
                select 
                (
                case 
                when cAcc_Num&lt;10 then
                     '00'+str(cAcc_Num,1)
                when cAcc_Num&lt;100 then
                     '0'+str(cAcc_Num,2)
                else
                     str(cAcc_Num,3)
                end
                ) as accNum,
                cAcc_Name as accName,
                companyName as companyName,
                '{organizationCode}' as organizationCode,
                '{organizationTypeCode}' as organizationTypeCode,
                '{trade}' as trade,
                '畅捷通软件有限公司' as  devCompany,
                '用友通新一代11.2'   as  versionCode,
                '{currentYear}' as currentYear,
                b.Name as nativeName,
                replace(value,'-',',') as accountCodingLevel
                from 
                UFTSystem..EAP_Account A,
                AA_Currency B,
                EAP_AccInformation C
                where
                B.isNative=1  and 
                C.sysID='FI'  and 
                A.DsName='{dsName}' and 
                C.name='AccountCodingLevelItemLength'
            </sql>     
            <fields>
                <field title='电子账簿编号' type='C..5'  name='accNum'  factType='C..3'/>
                <field title='电子账簿名称' type='C..60' name='accName' factType='C..50'/>
                <field title='会计核算单位' type='C..60' name='companyName' factType='C..100'/>
                <field title='组织机构代码' type='C..60' name='organizationCode' factType='C..60'/>
                <field title='单位性质' type='C..60' name='organizationTypeCode' factType='C..60'/>
                <field title='行业' type='C..20' name='trade' factType='C..20'/>
                <field title='开发单位' type='C..60' name='devCompany' factType='C..60'/>
                <field title='版本号' type='C..20' name='versionCode' factType='C..20'/> 
                <field title='年度' type='C4' name='currentYear' factType='C4'/>
                <field title='本位币' type='C..14' name='nativeName' factType='C..50'/>
                <field title='科目结构' type='C..30' name='accountCodingLevel' factType='C..30' />
            </fields>
        </file>
        <file name='KJKM.TXT' title='会计科目' flag=''>
            <sql>
                select 
                A.code as accountCode,
                A.name as accountName,
                A.depth as accountDepth,
                (
                case 
                when A.isAuxAccDepartment=1 then
                  1
                when A.isAuxAccPerson=1 then
                  1
                when A.isAuxAccCustomer=1 then
                  1
                when A.isAuxAccSupplier=1 then
                  1
                when A.isAuxAccProject=1 then
                  1
                else
                  0
                end
                ) as auxAccFlag,
                SUBSTRING(
                (
                case
                when isAuxAccDepartment=1 then
                  '/部门'
                else
                  ''
                end
                )
                +
                (
                case
                when isAuxAccPerson=1 then
                  '/人员'
                else
                  ''
                end
                )
                +
                (
                case
                when isAuxAccCustomer=1 and isAuxAccSupplier=1 then
                  '/单位'
                else
                  ''
                end
                )
                +
                (
                case
                when isAuxAccProject=1 then
                  '/项目'
                else
                  ''
                end
                )
                ,2,300
                )
                as auxAccGroup,
                AT.name+'类' as accountType,
                A.unit as unitName,
                (
                 case 
                 when E.code='00' then
                   '借'
                 else
                   '贷'
                 end
                )as dcDirection
                from 
                AA_Account A,
                AA_AccountType AT,
                EAP_EnumItem  E
                where
                A.idAccountTypeDTO=AT.id and
                A.dcdirection=E.id and
                A.accountingYear={currentYear}
                order by 
                A.code
            </sql>      
            <fields>
                <field title='科目编号' type='C..30' name='accountCode'  factType='C..30'/>
                <field title='科目名称' type='C..60' name='accountName'  factType='C..50'/>
                <field title='科目级次' type='I..2'  name='accountDepth' factType='I..2'/>
                <field title='辅助核算标志' type='C1' name='auxAccFlag' factType='C1'/>
                <field title='辅助核算项'   type='C..60' name='auxAccGroup' factType='C..60'/>
                <field title='科目类型'     type='C..20' name='accountType' factType='C..20'/>
                <field title='计量单位' type='C..10' name='unitName' factType='C..50'/>
                <field title='余额方向' type='C..4'  name='dcDirection' factType='C..4'/>
            </fields>
        </file>
        <file name='*' title='辅助核算项档案' flag=''>
            <sql>
                select 
                    max(isauxaccdepartment) as isAuxAccDepartment,
                    max(isauxaccperson) as isAuxAccPerson,
                    max(isauxaccsupplier) as isAuxAccSupplier,
                    max(isauxacccustomer) as isAuxAccCustomer,
                    max(isauxaccproject) as isAuxAccProject
                from 
                    AA_Account A 
                where 
                    A.accountingYear={currentYear}
            </sql>
            <sqlOption>
                select 
                    name,
                    value 
                from 
                    EAP_AccInformation Acc 
                where 
                    name 
                    in 
                    (
                    'QuantityPrecision',
                    'ExchangeRatePrecision',
                    'PricePrecision'
                    )
            </sqlOption>
            <fields>
                <field title='部门' name='isAuxAccDepartment'/>
                <field title='人员' name='isAuxAccPerson'/>            
                <field title='单位' name='isAuxAccSupplier|isAuxAccCustomer'/>
                <field title='项目' name='isAuxAccProject'/>
            </fields>     
        </file>  
        <file name='BMXX.TXT' title='部门' flag='isAuxAccDepartment'>
            <sql>
                select 
                    code as depCode,
                    name as depName 
                from 
                    AA_Department DEP
                order by code
            </sql>     
            <fields>   
                <field title='部门编号' type='C..20' name='depCode' factType='C..30'/>
                <field title='部门名称' type='C..40' name='depName' factType='C..50'/>         
            </fields>
    </file>  
        <file name='WLDW.TXT' title='单位' flag='isAuxAccSupplier|isAuxAccCustomer'>
            <sql>
                select 
                    PART.code as partCode,
                    PART.name as partName,
                    '单位' as type,
                    D.name as districtName,
                    PA.telephoneNo as telephoneNo,
                    PA.name as addressName,
                    '' as creditGrade
                from 
                AA_Partner  PART
                left join AA_District D on PART.iddistrict=D.id
                left join AA_PartnerAddress PA on  PA.isDefaultAddress=1 and PA.idpartner=PART.id
                order by PART.code
            </sql>    
            <fields>
                <field title='单位编号' type='C..30' name='partCode' factType='C..30'/>
                <field title='单位名称' type='C..60' name='partName' factType='C..100'/>
                <field title='类别' type='C..20' name='type' factType='C..20'/>
                <field title='地区' type='C..40' name='districtName' factType='C..50'/>  
                <field title='电话' type='C..20' name='telephoneNo' factType='C..100'/> 
                <field title='地址' type='C..60' name='addressName' factType='C..50'/>
                <field title='信用等级' type='C..6' name='creditGrade' factType='C..6'/>
            </fields>  
        </file>
        <file name='RYXX.TXT' title='人员' flag='isAuxAccPerson'>
            <sql>
                select 
                    PER.code as perCode,
                    PER.name as perName
                from 
                    AA_Person PER
                order by PER.code
            </sql>    
            <fields>
                <field title='人员编号' type='C..30'  name='perCode' factType='C..30'/>
                <field title='人员名称' type='C..60' name='perName' factType='C..50'/>
            </fields>  
        </file>
        <file name='XMXX.TXT' title='项目' flag='isAuxAccProject'>
            <sql>
                select 
                    PRO.code as proCode,
                    PRO.name as proName
                from 
                    AA_Project PRO
                order by PRO.code
            </sql>     
            <fields>
                <field title='项目编号' type='C..20'  name='proCode' factType='C..30'/>
                <field title='项目名称' type='C..60' name='proName' factType='C..50' />
            </fields>  
        </file>    
        <file name='KMYE.TXT' title='科目余额及发生额' flag='isPZ'> 
            <sql>
                select 
                   M.code as accountCode,
                   CU.Name  as currencyName,
                   substring(
					   (
					   case 
						  when DEP.code is null or DEP.code= '' then
							''
						  else
							'/'+Dep.code
					   end
					   )+
					   (
					   case 
						   when PER.code is null or PER.code='' then
							 ''
						   else
							 '/'+PER.code
					   end
					   )+
					   (
					   case 
						   when SUP.code is null or SUP.code='' then
							 ''
						   else
							 '/'+SUP.code
					   end
					   ) +
					   (
					   case 
						   when CUS.code is null or CUS.code='' then
							 ''
						   else
							 '/'+CUS.code
					   end
					   ) +
					   (
					   case 
						   when PRO.code is null or PRO.code='' then
							 ''
						   else
							 '/'+PRO.code
					   end
					   )
                   ,1,300) as accountGroup,
                   M.flag*(isnull(sum(QM.balanceAmount),0)-isnull(sum(C.amountDr),0)+isnull(sum(C.amountCr),0)) as beginAmount,               
                   M.flag*(isnull(sum(QM.balanceQuantity),0)-isnull(sum(C.quantityDr),0)+isnull(sum(C.quantityCr),0)) as beginQuantity,
                   M.flag*(isnull(sum(QM.balanceOrigAmount),0)-isnull(sum(C.origAmountDr),0)+isnull(sum(C.origAmountCr),0)) as beginOrigAmount,
                   
                   sum(C.amountDr) as amountDr,
                   sum(C.quantityDr) as quantityDr,               
                   sum(C.origAmountDr) as origAmountDr,
                   sum(C.amountCr) as amountCr,
                   sum(C.quantityCr) as quantityCr,               
                   sum(C.origAmountCr) as origAmountCr,   

                   M.flag*sum(QM.balanceAmount) as balanceAmount,
                   M.flag*sum(QM.balanceQuantity) as balanceQuantity,                   
                   M.flag*sum(QM.balanceOrigAmount) as balanceOrigAmount,
                   (
                   case when P.currentPeriod&lt;10 then
                        '0'+str(P.currentPeriod,1)
                   else
                        str(P.currentPeriod,2)
                   end
                   ) as currentPeriod
                from
                (
                  select
                   distinct  
                   (
                   case 
                    when A.dcdirection='BCB904BB-5154-4B1F-8A46-6ECAF2BE4E12' then
                         1.0
                    else
                        -1.0
                    end
                   ) as flag,
                                      
                   year as currentYear,
                   (

                      J.currentPeriod
                   ) as currentPeriod,
                   A.code as code,
                   APA.idparent as idaccount,
                   idcurrency,
                   (
                   case 
                     when isauxaccdepartment=1 then
                          idauxAccDepartment
                     else
                           '00000000-0000-0000-0000-000000000000'
                   end
                   ) as idauxAccDepartment,
                   ( 
                   case 
                     when isauxaccperson=1 then
                          idauxAccPerson
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccPerson,
                   ( 
                   case 
                     when isauxaccsupplier=1 then
                          idauxAccSupplier
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccSupplier,
                   ( 
                   case 
                     when isauxacccustomer=1 then
                          idauxAccCustomer
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccCustomer,
                   ( 
                   case 
                     when isauxaccproject=1 then
                          idauxAccProject
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccProject
                  from
                   GL_Journal J
                  left join AA_ParentAccount  APA on APA.idson=J.idaccount
                  left join AA_Account        A   on A.id=APA.idparent
                ) M 
                left join 
                (
                select 
                currentYear,currentPeriod 
                from 
                SM_Period 
                where 
                currentYear={currentYear} and 
                currentPeriod between 1 and {periodEnd}
                ) P on P.currentYear=M.currentYear and P.currentPeriod>=M.currentPeriod
                left join
                (
                    select
                       isPeriodBegin,
                       
                       year as currentYear,
                       (
                           J.currentPeriod
                       ) as currentPeriod,
                       APA.idparent as idaccount,
                       idcurrency,
                       (
                       case 
                         when isauxaccdepartment=1 then
                              idauxAccDepartment
                         else
                               '00000000-0000-0000-0000-000000000000'
                       end
                       ) as idauxAccDepartment,
                       ( 
                       case 
                         when isauxaccperson=1 then
                              idauxAccPerson
                         else
                              '00000000-0000-0000-0000-000000000000'
                       end ) as idauxAccPerson,
                       ( 
                       case 
                         when isauxaccsupplier=1 then
                              idauxAccSupplier
                         else
                              '00000000-0000-0000-0000-000000000000'
                       end ) as idauxAccSupplier,
                       ( 
                       case 
                         when isauxacccustomer=1 then
                              idauxAccCustomer
                         else
                              '00000000-0000-0000-0000-000000000000'
                       end ) as idauxAccCustomer,
                       ( 
                       case 
                         when isauxaccproject=1 then
                              idauxAccProject
                         else
                              '00000000-0000-0000-0000-000000000000'
                       end ) as idauxAccProject,
                       
                       SUM( isnull(periodBeginQuantityDr,0) - isnull(periodBeginQuantityCr,0) +
                                isnull(quantityDr,0) - isnull(quantityCr,0) ) as balanceQuantity,
                       SUM( isnull(periodBeginOrigAmountDr,0) - isnull(periodBeginOrigAmountCr,0) + 
                                isnull(origAmountDr,0) - isnull(origAmountCr,0) ) as balanceOrigAmount,
                       SUM(isnull(periodBeginAmountDr,0) - isnull(periodBeginAmountCr,0) + 
                                isnull(amountDr,0) - isnull(amountCr,0)) as balanceAmount
                    from
                       GL_Journal J
                    left join AA_ParentAccount  APA on APA.idson=J.idaccount
                    left join AA_Account        A   on A.id=APA.idparent
                    group by 
                    isPeriodBegin,
                    year,J.currentPeriod,APA.idparent,idcurrency,
                    idauxAccDepartment,idauxAccPerson,idauxAccSupplier,
                    idauxAccCustomer,idauxAccProject,
                    isauxaccdepartment,
                    isauxaccperson,
                    isauxaccsupplier,
                    isauxacccustomer,
                    isauxaccproject
                ) QM on
                QM.currentYear=M.currentYear and
                QM.currentPeriod= M.currentPeriod and
                QM.idaccount=M.idaccount and
                QM.idcurrency=M.idcurrency and
                QM.idauxAccDepartment=M.idauxAccDepartment and
                QM.idauxAccPerson=M.idauxAccPerson and
                QM.idauxAccSupplier=M.idauxAccSupplier and
                QM.idauxAccCustomer=M.idauxAccCustomer and
                QM.idauxAccProject=M.idauxAccProject
                left join
                (
                select 
                   year as currentYear,
                   J.currentPeriod,
                   APA.idparent as idaccount,
                   idcurrency,
                   (
                   case 
                     when isauxaccdepartment=1 then
                          idauxAccDepartment
                     else
                           '00000000-0000-0000-0000-000000000000'
                   end
                   ) as idauxAccDepartment,
                   ( 
                   case 
                     when isauxaccperson=1 then
                          idauxAccPerson
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccPerson,
                   ( 
                   case 
                     when isauxaccsupplier=1 then
                          idauxAccSupplier
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccSupplier,
                   ( 
                   case 
                     when isauxacccustomer=1 then
                          idauxAccCustomer
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccCustomer,
                   ( 
                   case 
                     when isauxaccproject=1 then
                          idauxAccProject
                     else
                          '00000000-0000-0000-0000-000000000000'
                   end ) as idauxAccProject,
                   
                   sum( 
                   case 
                       when J.isPeriodBegin=0 then
                            isnull(J.quantityDr,0)
                       else
                            0.0
                   end
                   ) as  quantityDr,
                   
                   sum( 
                   case
                       when J.isPeriodBegin=0 then
                            isnull(J.amountDr,0) 
                       else
                           0.0
                   end
                   ) as amountDr,
                   
                   sum(
                   case 
                       when J.isPeriodBegin=0 then
                            isnull(J.origAmountDr,0)
                       else
                            0.0
                   end
                   )  as origAmountDr,

                   sum(
                   case 
                       when J.isPeriodBegin=0 then
                            isnull(J.quantityCr,0)
                       else
                            0.0
                   end
                   ) as quantityCr,
                   
                   sum(
                   case 
                       when J.isPeriodBegin=0 then
                            isnull(J.amountCr,0)
                       else
                           0.0
                   end
                   ) as amountCr,

                   
                   sum( 
                   case 
                       when J.isPeriodBegin=0 then
                            isnull(J.origAmountCr,0)
                       else
                            0.0
                   end
                   ) as origAmountCr

                from
                   GL_Journal J
                left join AA_ParentAccount  APA on APA.idson=J.idaccount
                left join AA_Account        A   on A.id=APA.idparent
                group by 
                year,J.currentPeriod,APA.idparent,idcurrency,
                idauxAccDepartment,idauxAccPerson,idauxAccSupplier,
                idauxAccCustomer,idauxAccProject,
                isauxaccdepartment,
                isauxaccperson,
                isauxaccsupplier,
                isauxacccustomer,
                isauxaccproject
                )  C
                ON 
                C.currentYear=M.currentYear and
                C.currentPeriod=P.currentPeriod and 
                P.currentPeriod=M.currentPeriod and
                C.idaccount=M.idaccount and
                C.idcurrency=M.idcurrency and
                C.idauxAccDepartment=M.idauxAccDepartment and
                C.idauxAccPerson=M.idauxAccPerson and
                C.idauxAccSupplier=M.idauxAccSupplier and
                C.idauxAccCustomer=M.idauxAccCustomer and
                C.idauxAccProject=M.idauxAccProject

                left join AA_Currency   CU  on CU.id=M.idcurrency
                left join AA_Department DEP on DEP.id=M.idauxAccDepartment
                left join AA_Person     PER on PER.id=M.idauxAccPerson
                left join AA_Partner    SUP on SUP.id=M.idauxAccSupplier
                left join AA_Partner    CUS on CUS.id=M.idauxAccCustomer
                left join AA_Project    PRO on PRO.id=M.idauxAccProject
                where
                P.currentYear={currentYear} and
                P.currentPeriod between {periodBegin} and {periodEnd} 
                group by
                P.currentYear,P.currentPeriod,M.code,M.flag,
                CU.Name,DEP.code,PER.code,SUP.code,CUS.code,PRO.code
                order by 
                P.currentYear,P.currentPeriod,
                M.code,CU.Name,DEP.code,PER.code,SUP.code,CUS.code,PRO.code
             </sql>    
            <fields>
                <field title='科目编号' type='C..30' name='accountCode' factType='C..30'/>
                <field title='币种' type='C..14' name='currencyName' factType='C..50'/>
                <field title='辅助核算组' type='C..255' name='accountGroup' factType='C..155'/>
                <field title='期初余额' type='D20.2' name='beginAmount' factType='D20.2'/>
                <field title='期初数量' type='D20.2' name='beginQuantity' factType='D20.QuantityPrecision'/>
                <field title='期初外币余额' type='D20.2' name='beginOrigAmount' factType='D20.2'/>
                <field title='借方发生额' type='D18.2' name='amountDr' factType='D18.2'/>
                <field title='借方发生数量' type='D18.2' name='quantityDr' factType='D18.QuantityPrecision'/>
                <field title='借方外币发生额' type='D18.2' name='origAmountDr' factType='D18.2'/>
                <field title='贷方发生额' type='D18.2' name='amountCr' factType='D18.2'/>
                <field title='贷方发生数量' type='D18.2' name='quantityCr' factType='D18.QuantityPrecision'/>
                <field title='贷方外币发生额' type='D18.2' name='origAmountCr' factType='D18.2'/>
                <field title='期末余额' type='D20.2' name='balanceAmount' factType='D20.2'/>                                
                <field title='期末数量' type='D20.2' name='balanceQuantity' factType='D20.QuantityPrecision'/>   
                <field title='期末外币余额' type='D20.2' name='balanceOrigAmount' factType='D20.2'/>   
                <field title='会计月度' type='C2' name='currentPeriod' factType='C2'/>                      
            </fields>  
        </file>
        <file name='JZPZ.TXT' title='记账凭证' flag='isPZ'>
            <sql>
                select 
                replace(substring(D.voucherDate,1,10),'-','') as voucherDate,
                DT.name as typeName,
                D.code  as docCode,
                DE.code as rowCode,
                DE.summary as summary,
                A.code     as accountCode,
                (
                case 
                when AU.amount is not null  and DE.origamountdr is not null then
                   AU.amount
                else
                   DE.amountdr
                end
                ) as amountDr,
                (
                case 
                when AU.amount is not null and DE.amountCr is not null then
                    AU.amount
                else
                    DE.amountCr
                end
                ) as amountCr,
                C.name as currencyName,
                (
                case 
                when AU.origAmount is not null and DE.origamountdr is not null  then
                     AU.origAmount
                else
                     DE.origamountdr
                end
                ) as origAmountDr,
                (
                case
                when AU.origamount is null then
                     DE.origamountcr
                else
                     AU.origAmount
                end 
                ) as origAmountCr,
                DE.exchangerate as exchangeRate,

                (
                case 
                when AU.quantity is null then
                   isnull(quantitydr,quantitycr)
                else
                   AU.quantity
                end
                ) as quantity,
                (
                case 
                when AU.price is null then
                   DE.price
                else
                   AU.price
                end
                ) as price,
                   substring(
					   (
					   case 
						  when DEP.code is null or DEP.code= '' then
							''
						  else
							'/'+Dep.code
					   end
					   )+
					   (
					   case 
						   when PER.code is null or PER.code='' then
							 ''
						   else
							 '/'+PER.code
					   end
					   )+
					   (
					   case 
						   when SUP.code is null or SUP.code='' then
							 ''
						   else
							 '/'+SUP.code
					   end
					   ) +
					   (
					   case 
						   when CUS.code is null or CUS.code='' then
							 ''
						   else
							 '/'+CUS.code
					   end
					   ) +
					   (
					   case 
						   when PRO.code is null or PRO.code='' then
							 ''
						   else
							 '/'+PRO.code
					   end
					   )
                   ,1,300) as accountGroup,
                SE.name    as setttleType,
                ''    as billType,
                AU.billNo    as billCode,
                D.attachedVoucherNum,
                D.maker,
                D.auditor,
                D.bookKeeperName,
                D.cashierName,
                (
                case when D.IsPost=0 then
                  '0'
                else
                  '1'
                end
                ) as postFlag,
                (
                case when D.isinvalidate=0 then
                  '0'
                else
                  '1'
                end
                ) as invalidateFlag
                from
                GL_Doc D
                left join GL_Entry DE on D.id=DE.iddocDTO
                left join GL_AuxiliaryInfo AU on AU.idEntryDTO=DE.id
                left join AA_DocType DT on DT.id=D.iddocType
                left join AA_Account A  on A.id=DE.idaccount
                left join AA_Currency C on DE.idcurrency=C.id
                left join AA_SettleStyle SE on SE.id=AU.idsettlestyle
                left join AA_Department  DEP on DEP.id=AU.idauxAccDepartment
                left join AA_Person      PER on PER.id=AU.idauxAccPerson
                left join AA_Partner     SUP on SUP.id=AU.idauxAccSupplier
                left join AA_Partner     CUS on CUS.id=AU.idauxAccCustomer
                left join AA_Project     PRO on PRO.id=AU.idauxAccProject
                where
                D.voucherDate between '{dateBegin}' and '{dateEnd}'
                order by 
                D.voucherDate,D.code,DE.code, AU.code        
            </sql>      
            <fields>
                <field title='凭证日期' type='C8' name='voucherDate' factType='C8'/>
                <field title='凭证种类' type='C..12' name='typeName' factType='C..50'/>
                <field title='凭证编号' type='C..20' name='docCode' factType='C..30'/>
                <field title='行号' type='I..5' name='rowCode' factType='I..5' groupby='voucherDate,typeName,docCode'/>
                <field title='摘要' type='C..100' name='summary' factType='C..200'/>
                <field title='科目编号' type='C..30' name='accountCode' factType='C..30'/>
                <field title='借方金额' type='D18.2' name='amountDr' factType='D18.2'/>
                <field title='贷方金额' type='D18.2' name='amountCr' factType='D18.2'/>
                <field title='币种' type='C..14' name='currencyName' factType='C..50'/>
                <field title='借方外币金额' type='D18.2' name='origAmountDr' factType='D18.2'/>
                <field title='贷方外币金额' type='D18.2' name='origAmountCr' factType='D18.2'/>
                <field title='汇率' type='D13.6' name='exchangeRate' factType='D13.ExchangeRatePrecision'/>
                <field title='数量' type='D15.4' name='quantity' factType='D15.QuantityPrecision'/>
                <field title='单价' type='D18.4' name='price' factType='D18.PricePrecision'/>
                <field title='辅助核算组' type='C..255' name='accountGroup' factType='C..155'/>
                <field title='结算方式' type='C..20' name='setttleType' factType='C..50'/>
                <field title='票据类型' type='C..20' name='billType' factType='C..20'/>
                <field title='票据号' type='C..30' name='billCode' factType='C..30'/>
                <field title='附件数' type='I..4' name='attachedVoucherNum' factType='I..4'/>
                <field title='制单人员' type='C..20' name='maker' factType='C..50'/>
                <field title='审核人员' type='C..20' name='auditor' factType='C..50'/>
                <field title='记账人员' type='C..20' name='bookKeeperName' factType='C..50'/>
                <field title='出纳人员' type='C..20' name='cashierName' factType='C..50'/>
                <field title='记账标志' type='C1' name='postFlag' factType='C1'/>
                <field title='作废标志' type='C1' name='invalidateFlag' factType='C1'/>
            </fields> 
        </file>
    </files>
</export>